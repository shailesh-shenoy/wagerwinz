import {
  Box,
  Button,
  Card,
  CardBody,
  CardHeader,
  Text,
  Divider,
  FormControl,
  FormHelperText,
  FormLabel,
  Heading,
  Input,
  SimpleGrid,
  Stack,
  Link,
  Tooltip,
  InputGroup,
  InputRightAddon,
  useToast,
} from "@chakra-ui/react";
import { useEffect, useState } from "react";
import chainlinkPriceFeed from "@/artifacts/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol/AggregatorV3Interface.json";
import challengeFactory from "@/artifacts/contracts/ChallengeFactory.sol/ChallengeFactory.json";
import {
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
} from "wagmi";
import ContractInfo from "@/components/create-a-challenge/ContractInfo";
import { CHALLENGE_FACTORY_ADDRESS } from "@/artifacts/contracts/challengeFactoryAddress";
import { chainlink } from "@/types/typechain";
import { BigNumber, ethers, utils } from "ethers";
import ChallengeCreator from "@/components/create-a-challenge/ChallengeCreator";
import {
  useAggregatorV3InterfaceLatestRoundData,
  useChallengeFactoryGetFactoryDetails,
  useChallengeFactoryMinEntryFee,
} from "@/generated";
import { aggregatorV3InterfaceABI } from "../generated";
import { ChallengeFactoryDetails } from "@/components/create-a-challenge/types";
import { EthPriceFeedDetails } from "../components/create-a-challenge/types";

export default function CreateChallenge() {
  //* State and env variables

  const ethPriceFeedAddress =
    process.env.NEXT_PUBLIC_CHAINLINK_ETHUSD_CONTRACT_ADDRESS || "";

  //* Contract info state
  const [ethPriceFeedDetails, setEthPriceFeedDetails] =
    useState<EthPriceFeedDetails>({ ethPriceFeedAddress: ethPriceFeedAddress });
  const [challengeFactoryDetails, setChallengeFactoryDetails] =
    useState<ChallengeFactoryDetails>({
      challengeFactoryAddress: CHALLENGE_FACTORY_ADDRESS,
    });

  //* Wagmi autogenerated hook for eth price feed
  const { refetch: refetchEthFeed } = useAggregatorV3InterfaceLatestRoundData({
    // @ts-expect-error
    address: ethPriceFeedAddress,
    enabled: false,
    onSuccess: (data) => {
      console.log("ETH/USD Price Feed Data: ", data);
      setEthPriceFeedDetails({
        ...ethPriceFeedDetails,
        ethPriceFeedAddress: ethPriceFeedAddress,
        ethUsdPrice: data?.answer || 0,
        lastUpdatedAt: data?.updatedAt || 0,
        refetchEthFeed: refetchEthFeed,
      });
    },
  });

  //* Wagmi autogenerated hook for challenge factory
  const { refetch: refetchChallengeFactory } =
    useChallengeFactoryGetFactoryDetails({
      address: CHALLENGE_FACTORY_ADDRESS,
      enabled: false,
      onSuccess: (data) => {
        const _startBlock = data?._startBlock;
        const _owner = data?._owner;
        const _minEntryFee = data?._minEntryFee;
        const _minChallengeDuration = data?._minChallengeDuration;
        const _maxChallengeDuration = data?._maxChallengeDuration;
        const _minLockDuration = data?._minLockDuration;
        const _maxLockDuration = data?._maxLockDuration;
        const _settlementDuration = data?._settlementDuration;
        const _implementationAddress = data?._challengeImplementation;

        setChallengeFactoryDetails({
          ...challengeFactoryDetails,
          challengeFactoryAddress: CHALLENGE_FACTORY_ADDRESS,
          owner: _owner || ethers.constants.AddressZero,
          startBlock: _startBlock || 0,
          minEntryFee: _minEntryFee || 0,
          minChallengeDuration: _minChallengeDuration || 0,
          maxChallengeDuration: _maxChallengeDuration || 0,
          minLockDuration: _minLockDuration || 0,
          maxLockDuration: _maxLockDuration || 0,
          settlementDuration: _settlementDuration || 0,
          challengeImplementation: _implementationAddress || "",
          refetchChallengeFactory: refetchChallengeFactory,
        });
      },
    });

  useEffect(() => {
    refetchEthFeed();
    refetchChallengeFactory();
    console.log("UE called");
  }, [refetchEthFeed, refetchChallengeFactory]);

  return (
    <Box bg="secondary.100" p={10} minHeight="90vh">
      <SimpleGrid
        height="100%"
        spacing={4}
        templateColumns={{ sm: "1fr", md: "1fr 1fr" }}
      >
        <ContractInfo
          ethPriceFeedDetails={ethPriceFeedDetails}
          challengeFactoryDetails={challengeFactoryDetails}
        />
        <ChallengeCreator challengeFactoryDetails={challengeFactoryDetails} />
      </SimpleGrid>
    </Box>
  );
}
