// Generated by @wagmi/cli@0.1.15 on 4/18/2023 at 12:11:25 AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Challenge
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const challengeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_ethPriceFeedAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'challengerAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'challengerPrediction',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChallengeAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SETTLEMENT_FEE_MAX',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SETTLEMENT_FEE_PERCENT',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: '_challengerPrediction',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'acceptChallenge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'challenger',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'challengerPrediction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'creator',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'creatorPrediction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceFeed',
    outputs: [
      {
        name: '',
        internalType: 'contract AggregatorV3Interface',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChallengeDetails',
    outputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_startBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_startTime', internalType: 'uint256', type: 'uint256' },
      { name: '_entryFee', internalType: 'uint256', type: 'uint256' },
      { name: '_lockTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_settlementStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_settlementEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_creator', internalType: 'address', type: 'address' },
      { name: '_creatorPrediction', internalType: 'uint256', type: 'uint256' },
      { name: '_challenger', internalType: 'address', type: 'address' },
      {
        name: '_challengerPrediction',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_settled', internalType: 'bool', type: 'bool' },
      { name: '_settledBy', internalType: 'address', type: 'address' },
      { name: '_active', internalType: 'bool', type: 'bool' },
      { name: '_winner', internalType: 'address', type: 'address' },
      { name: '_SETTLEMENT_FEE_PERCENT', internalType: 'uint8', type: 'uint8' },
      { name: '_SETTLEMENT_FEE_MAX', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_lockTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_settlementStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_settlementEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_creator', internalType: 'address', type: 'address' },
      { name: '_creatorPrediction', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settledBy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settlementEndTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settlementStartTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'startBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'startTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'winner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChallengeFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const challengeFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_minEntryFee', internalType: 'uint256', type: 'uint256' },
      {
        name: '_minChallengeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_maxChallengeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_minLockDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_maxLockDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_settlementDuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_ethPriceFeedAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'creatorAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'challengeAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'lockTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'entryFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settlementStartTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settlementEndTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'creatorPrediction',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ChallengeCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'challengeImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_creatorPrediction', internalType: 'uint256', type: 'uint256' },
      { name: '_lockTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_settlementStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'createChallenge',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ethPriceFeedAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFactoryDetails',
    outputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_startBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_minEntryFee', internalType: 'uint256', type: 'uint256' },
      {
        name: '_minChallengeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_maxChallengeDuration',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_minLockDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_maxLockDuration', internalType: 'uint256', type: 'uint256' },
      { name: '_settlementDuration', internalType: 'uint256', type: 'uint256' },
      {
        name: '_challengeImplementation',
        internalType: 'address',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxChallengeDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxLockDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minChallengeDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minEntryFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minLockDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settlementDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'startBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AggregatorV3Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aggregatorV3InterfaceABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_roundId', internalType: 'uint80', type: 'uint80' }],
    name: 'getRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link challengeABI}__.
 */
export function useChallenge(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: challengeABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__.
 */
export function useChallengeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof challengeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    ...config,
  } as UseContractReadConfig<typeof challengeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"SETTLEMENT_FEE_MAX"`.
 */
export function useChallengeSettlementFeeMax<
  TSelectData = ReadContractResult<typeof challengeABI, 'SETTLEMENT_FEE_MAX'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'SETTLEMENT_FEE_MAX',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'SETTLEMENT_FEE_MAX',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'SETTLEMENT_FEE_MAX',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"SETTLEMENT_FEE_PERCENT"`.
 */
export function useChallengeSettlementFeePercent<
  TSelectData = ReadContractResult<
    typeof challengeABI,
    'SETTLEMENT_FEE_PERCENT'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'SETTLEMENT_FEE_PERCENT',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'SETTLEMENT_FEE_PERCENT',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'SETTLEMENT_FEE_PERCENT',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"active"`.
 */
export function useChallengeActive<
  TSelectData = ReadContractResult<typeof challengeABI, 'active'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'active', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'active',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'active', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"challenger"`.
 */
export function useChallengeChallenger<
  TSelectData = ReadContractResult<typeof challengeABI, 'challenger'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'challenger', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'challenger',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'challenger', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"challengerPrediction"`.
 */
export function useChallengeChallengerPrediction<
  TSelectData = ReadContractResult<typeof challengeABI, 'challengerPrediction'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'challengerPrediction',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'challengerPrediction',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'challengerPrediction',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"creator"`.
 */
export function useChallengeCreator<
  TSelectData = ReadContractResult<typeof challengeABI, 'creator'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'creator', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'creator',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'creator', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"creatorPrediction"`.
 */
export function useChallengeCreatorPrediction<
  TSelectData = ReadContractResult<typeof challengeABI, 'creatorPrediction'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'creatorPrediction',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'creatorPrediction',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'creatorPrediction',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"entryFee"`.
 */
export function useChallengeEntryFee<
  TSelectData = ReadContractResult<typeof challengeABI, 'entryFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'entryFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'entryFee',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'entryFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"ethPriceFeed"`.
 */
export function useChallengeEthPriceFeed<
  TSelectData = ReadContractResult<typeof challengeABI, 'ethPriceFeed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'ethPriceFeed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'ethPriceFeed',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'ethPriceFeed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"getChallengeDetails"`.
 */
export function useChallengeGetChallengeDetails<
  TSelectData = ReadContractResult<typeof challengeABI, 'getChallengeDetails'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'getChallengeDetails',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'getChallengeDetails',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'getChallengeDetails',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"lockTime"`.
 */
export function useChallengeLockTime<
  TSelectData = ReadContractResult<typeof challengeABI, 'lockTime'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'lockTime', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'lockTime',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'lockTime', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"owner"`.
 */
export function useChallengeOwner<
  TSelectData = ReadContractResult<typeof challengeABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"settled"`.
 */
export function useChallengeSettled<
  TSelectData = ReadContractResult<typeof challengeABI, 'settled'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'settled', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'settled',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'settled', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"settledBy"`.
 */
export function useChallengeSettledBy<
  TSelectData = ReadContractResult<typeof challengeABI, 'settledBy'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'settledBy', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'settledBy',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'settledBy', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"settlementEndTime"`.
 */
export function useChallengeSettlementEndTime<
  TSelectData = ReadContractResult<typeof challengeABI, 'settlementEndTime'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'settlementEndTime',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'settlementEndTime',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'settlementEndTime',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"settlementStartTime"`.
 */
export function useChallengeSettlementStartTime<
  TSelectData = ReadContractResult<typeof challengeABI, 'settlementStartTime'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeABI,
      'settlementStartTime',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'settlementStartTime',
    ...config,
  } as UseContractReadConfig<
    typeof challengeABI,
    'settlementStartTime',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"startBlock"`.
 */
export function useChallengeStartBlock<
  TSelectData = ReadContractResult<typeof challengeABI, 'startBlock'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'startBlock', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'startBlock',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'startBlock', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"startTime"`.
 */
export function useChallengeStartTime<
  TSelectData = ReadContractResult<typeof challengeABI, 'startTime'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'startTime', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'startTime',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'startTime', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"winner"`.
 */
export function useChallengeWinner<
  TSelectData = ReadContractResult<typeof challengeABI, 'winner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeABI, 'winner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeABI,
    functionName: 'winner',
    ...config,
  } as UseContractReadConfig<typeof challengeABI, 'winner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeABI}__.
 */
export function useChallengeWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof challengeABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof challengeABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeABI, TFunctionName>({
    abi: challengeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"acceptChallenge"`.
 */
export function useChallengeAcceptChallenge<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeABI,
          'acceptChallenge'
        >['abi'],
        'acceptChallenge'
      > & { functionName?: 'acceptChallenge' }
    : UseContractWriteConfig<TMode, typeof challengeABI, 'acceptChallenge'> & {
        abi?: never
        functionName?: 'acceptChallenge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeABI, 'acceptChallenge'>({
    abi: challengeABI,
    functionName: 'acceptChallenge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"initialize"`.
 */
export function useChallengeInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof challengeABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof challengeABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeABI, 'initialize'>({
    abi: challengeABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useChallengeRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof challengeABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeABI, 'renounceOwnership'>({
    abi: challengeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useChallengeTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof challengeABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeABI, 'transferOwnership'>({
    abi: challengeABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeABI}__.
 */
export function usePrepareChallengeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"acceptChallenge"`.
 */
export function usePrepareChallengeAcceptChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeABI, 'acceptChallenge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeABI,
    functionName: 'acceptChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeABI, 'acceptChallenge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareChallengeInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareChallengeRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareChallengeTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeABI}__.
 */
export function useChallengeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof challengeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeABI,
    ...config,
  } as UseContractEventConfig<typeof challengeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeABI}__ and `eventName` set to `"ChallengeAccepted"`.
 */
export function useChallengeChallengeAcceptedEvent(
  config: Omit<
    UseContractEventConfig<typeof challengeABI, 'ChallengeAccepted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeABI,
    eventName: 'ChallengeAccepted',
    ...config,
  } as UseContractEventConfig<typeof challengeABI, 'ChallengeAccepted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useChallengeOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof challengeABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof challengeABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link challengeFactoryABI}__.
 */
export function useChallengeFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: challengeFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__.
 */
export function useChallengeFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof challengeFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"challengeImplementation"`.
 */
export function useChallengeFactoryChallengeImplementation<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'challengeImplementation'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'challengeImplementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'challengeImplementation',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'challengeImplementation',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"ethPriceFeedAddress"`.
 */
export function useChallengeFactoryEthPriceFeedAddress<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'ethPriceFeedAddress'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'ethPriceFeedAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'ethPriceFeedAddress',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'ethPriceFeedAddress',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"getFactoryDetails"`.
 */
export function useChallengeFactoryGetFactoryDetails<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'getFactoryDetails'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'getFactoryDetails',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'getFactoryDetails',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'getFactoryDetails',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"maxChallengeDuration"`.
 */
export function useChallengeFactoryMaxChallengeDuration<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'maxChallengeDuration'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'maxChallengeDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'maxChallengeDuration',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'maxChallengeDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"maxLockDuration"`.
 */
export function useChallengeFactoryMaxLockDuration<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'maxLockDuration'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'maxLockDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'maxLockDuration',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'maxLockDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"minChallengeDuration"`.
 */
export function useChallengeFactoryMinChallengeDuration<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'minChallengeDuration'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'minChallengeDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'minChallengeDuration',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'minChallengeDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"minEntryFee"`.
 */
export function useChallengeFactoryMinEntryFee<
  TSelectData = ReadContractResult<typeof challengeFactoryABI, 'minEntryFee'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'minEntryFee',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'minEntryFee',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'minEntryFee',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"minLockDuration"`.
 */
export function useChallengeFactoryMinLockDuration<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'minLockDuration'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'minLockDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'minLockDuration',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'minLockDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useChallengeFactoryOwner<
  TSelectData = ReadContractResult<typeof challengeFactoryABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof challengeFactoryABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof challengeFactoryABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"settlementDuration"`.
 */
export function useChallengeFactorySettlementDuration<
  TSelectData = ReadContractResult<
    typeof challengeFactoryABI,
    'settlementDuration'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'settlementDuration',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'settlementDuration',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'settlementDuration',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"startBlock"`.
 */
export function useChallengeFactoryStartBlock<
  TSelectData = ReadContractResult<typeof challengeFactoryABI, 'startBlock'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof challengeFactoryABI,
      'startBlock',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: challengeFactoryABI,
    functionName: 'startBlock',
    ...config,
  } as UseContractReadConfig<
    typeof challengeFactoryABI,
    'startBlock',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__.
 */
export function useChallengeFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof challengeFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof challengeFactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeFactoryABI, TFunctionName>({
    abi: challengeFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"createChallenge"`.
 */
export function useChallengeFactoryCreateChallenge<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeFactoryABI,
          'createChallenge'
        >['abi'],
        'createChallenge'
      > & { functionName?: 'createChallenge' }
    : UseContractWriteConfig<
        TMode,
        typeof challengeFactoryABI,
        'createChallenge'
      > & {
        abi?: never
        functionName?: 'createChallenge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof challengeFactoryABI, 'createChallenge'>(
    {
      abi: challengeFactoryABI,
      functionName: 'createChallenge',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useChallengeFactoryRenounceOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeFactoryABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof challengeFactoryABI,
        'renounceOwnership'
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof challengeFactoryABI,
    'renounceOwnership'
  >({
    abi: challengeFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useChallengeFactoryTransferOwnership<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof challengeFactoryABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        TMode,
        typeof challengeFactoryABI,
        'transferOwnership'
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof challengeFactoryABI,
    'transferOwnership'
  >({
    abi: challengeFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__.
 */
export function usePrepareChallengeFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof challengeFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof challengeFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"createChallenge"`.
 */
export function usePrepareChallengeFactoryCreateChallenge(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof challengeFactoryABI,
      'createChallenge'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeFactoryABI,
    functionName: 'createChallenge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof challengeFactoryABI,
    'createChallenge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareChallengeFactoryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof challengeFactoryABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeFactoryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof challengeFactoryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link challengeFactoryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareChallengeFactoryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof challengeFactoryABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: challengeFactoryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof challengeFactoryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeFactoryABI}__.
 */
export function useChallengeFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof challengeFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof challengeFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeFactoryABI}__ and `eventName` set to `"ChallengeCreated"`.
 */
export function useChallengeFactoryChallengeCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof challengeFactoryABI, 'ChallengeCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeFactoryABI,
    eventName: 'ChallengeCreated',
    ...config,
  } as UseContractEventConfig<typeof challengeFactoryABI, 'ChallengeCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link challengeFactoryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useChallengeFactoryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof challengeFactoryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: challengeFactoryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof challengeFactoryABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TSelectData = ReadContractResult<typeof ownableABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__.
 */
export function useAggregatorV3Interface(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: aggregatorV3InterfaceABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__.
 */
export function useAggregatorV3InterfaceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof aggregatorV3InterfaceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__ and `functionName` set to `"decimals"`.
 */
export function useAggregatorV3InterfaceDecimals<
  TSelectData = ReadContractResult<typeof aggregatorV3InterfaceABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      'decimals',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    'decimals',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__ and `functionName` set to `"description"`.
 */
export function useAggregatorV3InterfaceDescription<
  TSelectData = ReadContractResult<
    typeof aggregatorV3InterfaceABI,
    'description'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      'description',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    functionName: 'description',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    'description',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__ and `functionName` set to `"getRoundData"`.
 */
export function useAggregatorV3InterfaceGetRoundData<
  TSelectData = ReadContractResult<
    typeof aggregatorV3InterfaceABI,
    'getRoundData'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      'getRoundData',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    functionName: 'getRoundData',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    'getRoundData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__ and `functionName` set to `"latestRoundData"`.
 */
export function useAggregatorV3InterfaceLatestRoundData<
  TSelectData = ReadContractResult<
    typeof aggregatorV3InterfaceABI,
    'latestRoundData'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      'latestRoundData',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    functionName: 'latestRoundData',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    'latestRoundData',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aggregatorV3InterfaceABI}__ and `functionName` set to `"version"`.
 */
export function useAggregatorV3InterfaceVersion<
  TSelectData = ReadContractResult<typeof aggregatorV3InterfaceABI, 'version'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof aggregatorV3InterfaceABI,
      'version',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: aggregatorV3InterfaceABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof aggregatorV3InterfaceABI,
    'version',
    TSelectData
  >)
}
