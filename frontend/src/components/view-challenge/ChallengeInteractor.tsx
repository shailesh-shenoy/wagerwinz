import {
  Card,
  CardBody,
  CardHeader,
  Divider,
  FormControl,
  FormHelperText,
  FormLabel,
  Heading,
  Input,
  Link,
  Stack,
  StackDivider,
  Tooltip,
} from "@chakra-ui/react";
import React from "react";
import ChallengeAcceptGrid from "../challenge/ChallengeAcceptGrid";
import ChallengeSettleGrid from "../challenge/ChallengeSettleGrid";
import ChallengeWithdrawGrid from "../challenge/ChallengeWithdrawGrid";
import { ChallengeDetails } from "../challenge/types";

export default function ChallengeInteractor({
  challengeDetails,
  setChallengeDetails,
}: ChallengeInteractorProps) {
  return (
    <Card rounded="2xl">
      <CardHeader>
        <Heading as="h1" size="lg" textAlign="center" fontWeight={400}>
          INTERACT WITH CHALLENGE
        </Heading>
      </CardHeader>
      <Divider color="gray.300" />
      <CardBody>
        <Stack direction="column" spacing={4} divider={<StackDivider />}>
          <FormControl gridColumn={{ base: "span 2" }} isReadOnly>
            <FormLabel size="md">Challenge Address</FormLabel>
            <Tooltip
              hasArrow
              label={`Address of the Challenge contract the user is accepting. This address is generated by the Challenge Factory contract and is unique to this challenge.`}
              bg="green.600"
              color="white"
            >
              <Input
                variant="filled"
                type="text"
                bg="secondary.100"
                value={challengeDetails?.challengeAddress ?? "Loading..."}
                size="md"
              />
            </Tooltip>
            <FormHelperText>
              View on Etherscan:{" "}
              <Link
                href={`https://sepolia.etherscan.io/address/${
                  challengeDetails?.challengeAddress ?? "?"
                }`}
                target="_blank"
                color="green.800"
              >
                {`https://sepolia.etherscan.io/address/${
                  challengeDetails?.challengeAddress ?? "?"
                }`}
              </Link>
            </FormHelperText>
          </FormControl>
          <ChallengeAcceptGrid challengeDetails={challengeDetails} />
          <ChallengeSettleGrid />
          <ChallengeWithdrawGrid />
        </Stack>
      </CardBody>
    </Card>
  );
}

export type ChallengeInteractorProps = {
  challengeDetails: ChallengeDetails;
  setChallengeDetails: (challengeDetails: ChallengeDetails) => void;
};
