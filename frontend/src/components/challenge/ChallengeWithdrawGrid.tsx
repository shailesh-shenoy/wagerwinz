import { useState } from "react";
import { ChallengeDetails } from "./types";
import {
  Button,
  ButtonGroup,
  Heading,
  IconButton,
  Stack,
  Tooltip,
  useToast,
} from "@chakra-ui/react";
import {
  useChallengeAmountWithdrawnEvent,
  useChallengeWithdraw,
  usePrepareChallengeWithdraw,
} from "@/generated";
import { useWaitForTransaction } from "wagmi";
import { utils } from "ethers";
import { RepeatIcon } from "@chakra-ui/icons";

export default function ChallengeWithdrawGrid({
  challengeDetails,
}: ChallengeWithdrawGridProps) {
  //* Local state
  const [validWithdraw, setValidWithdraw] = useState<boolean>(false);

  const toast = useToast();

  //* Wagmi autogenerated usePrepareContractWrite hook
  const {
    config: challengeWithdrawConfig,
    isLoading: isWithdrawValidateLoading,
    refetch: refetchChallengeWithdrawValidate,
  } = usePrepareChallengeWithdraw({
    // @ts-expect-error
    address: challengeDetails?.challengeAddress ?? "",
    enabled: false,
    onError: (error: any) => {
      setValidWithdraw(false);
      toast({
        title: "Cannot withdraw from the challenge",
        description: `Challenge at address ${
          challengeDetails?.challengeAddress ?? "?"
        } will throw the following error while withdrawing -- ${
          error?.reason || error?.message
        }`,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    },
    onSuccess: () => {
      setValidWithdraw(true);
      toast({
        title: "You can withdraw from the challenge",
        status: "success",
        duration: 2000,
        isClosable: true,
      });
    },
  });

  //* Wagmi autogenerated useContractWrite hook
  const {
    data: challengeWithdrawData,
    isLoading: isWithdrawLoading,
    write: challengeWithdraw,
  } = useChallengeWithdraw({
    ...challengeWithdrawConfig,
    onError: (error: any) => {
      toast({
        title: "Error while sending withdraw transaction",
        description: `Error thrown while withdrawing from the challenge -- ${
          error?.reason || error?.message
        }`,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    },
    onSuccess: () => {
      toast({
        title: "Withdraw transaction sent successfully",
        status: "info",
        duration: 1000,
        isClosable: true,
      });
    },
  });

  //* Wait for withdraw transaction hook
  const { isLoading: isWithdrawTxLoading } = useWaitForTransaction({
    confirmations: 1,
    hash: challengeWithdrawData?.hash,
    onSuccess: (data) => {
      toast({
        title: "Withdraw transaction confirmed",
        description: `Challenge withdraw confirmed with transaction hash ${data.transactionHash}`,
        status: "info",
        duration: 1000,
        isClosable: true,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Challenge withdraw transaction failed",
        description: `Challenge withdrawal failed with error -- ${
          error?.reason || error?.message
        }`,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    },
  });

  //* Wagmi autogenerated Withdraw event hook
  useChallengeAmountWithdrawnEvent({
    // @ts-expect-error
    address: challengeDetails?.challengeAddress ?? "",
    listener(_withdrawnBy, _amount) {
      challengeDetails?.refetchChallengeDetails?.();
      console.log("Withdrawal completed!");
      toast({
        title: "Withdrawal completed!",
        description: `${utils.formatEther(
          _amount
        )} ETH withdrawn from the challenge by address ${_withdrawnBy}`,
        status: "success",
        duration: 2000,
        isClosable: true,
      });
    },
  });

  return (
    <Stack direction="column" spacing={4}>
      <Heading as="h3" size="md" gridColumn="span 2" fontWeight={100}>
        Withdraw ETH from the challenge
      </Heading>
      <ButtonGroup gap={4}>
        <Tooltip
          hasArrow
          label="Validate withdraw transaction before sending it to the challenge"
          bg="white"
          color="black"
        >
          <IconButton
            aria-label="Validate challenge withdraw transaction"
            colorScheme="black"
            variant="outline"
            icon={<RepeatIcon />}
            isLoading={isWithdrawValidateLoading}
            onClick={validateWithdrawChallenge}
          />
        </Tooltip>
        <Tooltip
          hasArrow
          label={`Withdraw ETH from challenge at address ${
            challengeDetails?.challengeAddress || "?"
          }.
            `}
          bg="white"
          color="black"
        >
          <Button
            onClick={handleWithdrawChallenge}
            colorScheme={"black"}
            variant="outline"
            isDisabled={
              !validWithdraw || isWithdrawLoading || isWithdrawTxLoading
            }
            isLoading={isWithdrawLoading || isWithdrawTxLoading}
            alignSelf="center"
          >
            Withdraw your ETH
          </Button>
        </Tooltip>
      </ButtonGroup>
    </Stack>
  );

  function validateWithdrawChallenge() {
    refetchChallengeWithdrawValidate();
  }

  function handleWithdrawChallenge() {
    challengeWithdraw?.();
  }
}

export type ChallengeWithdrawGridProps = {
  challengeDetails: ChallengeDetails;
};
